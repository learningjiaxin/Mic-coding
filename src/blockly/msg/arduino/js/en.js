// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

const LoadArduinoMsgEn = () => {
  Blockly.Msg.ADD_COMMENT = "Add Comment";
  Blockly.Msg.ARD_ANALOGREAD = "read analog pin#";
  Blockly.Msg.ARD_ANALOGREAD_TIP = "Return value between 0 and 1024";
  Blockly.Msg.ARD_ANALOGWRITE = "set analog pin#";
  Blockly.Msg.ARD_ANALOGWRITE_TIP = "Write analog value between 0 and 255 to a specific PWM Port";
  Blockly.Msg.ARD_BUILTIN_LED = "set built-in LED";
  Blockly.Msg.ARD_BUILTIN_LED_TIP = "Light on or off for the built-in LED of the Arduino";
  Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";
  Blockly.Msg.ARD_DEFINE = "Define";
  Blockly.Msg.ARD_DIGITALREAD = "read digital pin#";
  Blockly.Msg.ARD_DIGITALREAD_TIP = "Read digital value on a pin: HIGH or LOW";
  Blockly.Msg.ARD_DIGITALWRITE = "set digital pin#";
  Blockly.Msg.ARD_DIGITALWRITE_TIP = "Write digital value HIGH or LOW to a specific Port";
  Blockly.Msg.ARD_FUN_RUN_LOOP = "CocoBlockly loop forever:";
  Blockly.Msg.ARD_FUN_RUN_SETUP = "CocoBlockly run first:";
  Blockly.Msg.ARD_FUN_RUN_TIP = "Defines the Arduino setup() and loop() functions.";
  Blockly.Msg.ARD_HIGH = "HIGH";
  Blockly.Msg.ARD_HIGHLOW_TIP = "Set a pin state logic High or Low.";
  Blockly.Msg.ARD_LOW = "LOW";
  Blockly.Msg.ARD_MAP = "Map";
  Blockly.Msg.ARD_MAP_TIP = "Re-maps a number from [0-1024] to another.";
  Blockly.Msg.ARD_MAP_VAL = "value to [0-";
  Blockly.Msg.ARD_NOTONE_PIN = "No tone";
  Blockly.Msg.ARD_NOTONE_PIN_TIP = "Stop generating a tone on a pin";
  Blockly.Msg.ARD_PIN_WARN1 = "Pin %1 is needed for %2 as pin %3. Already used as %4.";
  Blockly.Msg.ARD_NOTONE = "Turn off the tone on pin# %1";
  Blockly.Msg.ARD_PULSEON = "pulse on pin #";
  Blockly.Msg.ARD_PULSEREAD = "Read";
  Blockly.Msg.ARD_PULSETIMEOUT = "timeout after";
  Blockly.Msg.ARD_PULSETIMEOUT_MS = "";
  Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Measures the duration of a pulse on the selected pin, if it is within the timeout.";
  Blockly.Msg.ARD_PULSE_TIP = "Measures the duration of a pulse on the selected pin.";
  Blockly.Msg.ARD_PWMWRITE = "set pwm pin#";
  Blockly.Msg.ARD_SERIAL_AVAILABLE = "avalible";
  Blockly.Msg.ARD_SERIAL_BPS = "bps";
  Blockly.Msg.ARD_SERIAL_PRINT = "print";
  Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "add new line";
  Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Prints data to the console/serial port as human-readable ASCII text.";
  Blockly.Msg.ARD_SERIAL_PRINT_WARN = "A setup block for serial must be added to the workspace to use this block!";
  Blockly.Msg.ARD_SERIAL_READ = "read";
  Blockly.Msg.ARD_SERIAL_SETUP = "Setup";
  Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Selects the speed for a specific Serial peripheral";
  Blockly.Msg.ARD_SERIAL_SPEED = ":  speed to";
  Blockly.Msg.ARD_SERIAL_WRITE = "write";
  Blockly.Msg.ARD_SERVO_READ = "read SERVO from PIN#";
  Blockly.Msg.ARD_SERVO_READ_TIP = "Read a Servo angle";
  Blockly.Msg.ARD_SERVO_SETUP = "Servo Setup";
  Blockly.Msg.ARD_SERVO_WRITE = "set SERVO from Pin";
  Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrees (0~180)";
  Blockly.Msg.ARD_SERVO_WRITE_TIP = "Set a Servo to an specified angle";
  Blockly.Msg.ARD_SERVO_WRITE_TO = "to";
  Blockly.Msg.ARD_SPI_SETUP = "Setup";
  Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";
  Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "clock divide";
  Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";
  Blockly.Msg.ARD_SPI_SETUP_MODE = "SPI mode (idle - edge)";
  Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Low - Falling)";
  Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Low - Rising)";
  Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (High - Falling)";
  Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (High - Rising)";
  Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";
  Blockly.Msg.ARD_SPI_SETUP_SHIFT = "data shift";
  Blockly.Msg.ARD_SPI_SETUP_TIP = "Configures the SPI peripheral.";
  Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Send a SPI message to an specified slave device and get data back.";
  Blockly.Msg.ARD_SPI_TRANS_NONE = "none";
  Blockly.Msg.ARD_SPI_TRANS_SLAVE = "to slave pin";
  Blockly.Msg.ARD_SPI_TRANS_TIP = "Send a SPI message to an specified slave device.";
  Blockly.Msg.ARD_SPI_TRANS_VAL = "transfer";
  Blockly.Msg.ARD_SPI_TRANS_WARN1 = "A setup block for %1 must be added to the workspace to use this block!";
  Blockly.Msg.ARD_SPI_TRANS_WARN2 = "Old pin value %1 is no longer available.";
  Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";
  Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";
  Blockly.Msg.ARD_STEPPER_MOTOR = "stepper motor:";
  Blockly.Msg.ARD_STEPPER_PIN1 = "pin1#";
  Blockly.Msg.ARD_STEPPER_PIN2 = "pin2#";
  Blockly.Msg.ARD_STEPPER_REVOLVS = "how many steps per revolution";
  Blockly.Msg.ARD_STEPPER_SETUP = "Setup stepper motor";
  Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configures a stepper motor pinout and other settings.";
  Blockly.Msg.ARD_STEPPER_SPEED = "set speed (rpm) to";
  Blockly.Msg.ARD_STEPPER_STEP = "move stepper";
  Blockly.Msg.ARD_STEPPER_STEPS = "steps";
  Blockly.Msg.ARD_STEPPER_STEP_TIP = "Turns the stepper motor a specific number of steps.";
  Blockly.Msg.ARD_TIME_CHRONO_CHECK = "Stopwatch has passed";
  Blockly.Msg.ARD_TIME_CHRONO_CHECK1 = "ms";
  Blockly.Msg.ARD_TIME_CHRONO_ELAPSED = "Stopwatch elapsed";
  Blockly.Msg.ARD_TIME_CHRONO_RESET = "Reset Stopwatch";
  Blockly.Msg.ARD_TIME_CHRONO_SETUP = "Stopwatch Setup";
  Blockly.Msg.ARD_TIME_DELAY = "wait";
  Blockly.Msg.ARD_TIME_DELAY_MICROS = "microseconds";
  Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Wait specific time in microseconds";
  Blockly.Msg.ARD_TIME_DELAY_TIP = "Wait specific time in milliseconds";
  Blockly.Msg.ARD_TIME_DO = "Do";
  Blockly.Msg.ARD_TIME_DO_MS = "Do";
  Blockly.Msg.ARD_TIME_EVERY = "Every";
  Blockly.Msg.ARD_TIME_EVERY_MS = "Every";
  Blockly.Msg.ARD_TIME_INF = "wait forever (end program)";
  Blockly.Msg.ARD_TIME_INF_TIP = "Wait indefinitely, stopping the program.";
  Blockly.Msg.ARD_TIME_MICROS = "current elapsed Time (microseconds)";
  Blockly.Msg.ARD_TIME_MICROS_TIP = "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";
  Blockly.Msg.ARD_TIME_MILLIS = "current elapsed Time (milliseconds)";
  Blockly.Msg.ARD_TIME_MILLIS_TIP = "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";
  Blockly.Msg.ARD_TIME_MS = "milliseconds";
  Blockly.Msg.ARD_TIME_SECOND = "second(s)";
  Blockly.Msg.ARD_TIME_SECOND_MS = "millisecond(s)";
  Blockly.Msg.ARD_TONE_FREQ = "frequency";
  Blockly.Msg.ARD_TONE_PIN = "Tone PIN#";
  Blockly.Msg.ARD_TONE_PIN_TIP = "Generate audio tones on a pin";
  Blockly.Msg.ARD_TYPE_ARRAY = "Array";
  Blockly.Msg.ARD_TYPE_BOOL = "Boolean";
  Blockly.Msg.ARD_TYPE_CHAR = "Character";
  Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "ChildBlockMissing";
  Blockly.Msg.ARD_TYPE_DECIMAL = "Decimal";
  Blockly.Msg.ARD_TYPE_LONG = "Large Number";
  Blockly.Msg.ARD_TYPE_NULL = "Null";
  Blockly.Msg.ARD_TYPE_NUMBER = "Number";
  Blockly.Msg.ARD_TYPE_SHORT = "Short Number";
  Blockly.Msg.ARD_TYPE_TEXT = "Text";
  Blockly.Msg.ARD_TYPE_UNDEF = "Undefined";
  Blockly.Msg.ARD_VAR_AS = "as";
  Blockly.Msg.ARD_VAR_AS_TIP = "Sets a value to a specific type";
  Blockly.Msg.ARD_WRITE_TO = "to";
  Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
  Blockly.Msg.BASIC_AS = "as";
  Blockly.Msg.BASIC_BLACK_OUT = "Black out";
  Blockly.Msg.BASIC_BRTN = "Brightness";
  Blockly.Msg.BASIC_BUZZER_PLAY = "Buzzer plays ";
  Blockly.Msg.BASIC_BUZZER_SETUP = "Buzzer Setup";
  Blockly.Msg.BASIC_COUNTER_SETTING = "on button";
  Blockly.Msg.BASIC_COUNTER_SETUP = "Set Counter ";
  Blockly.Msg.BASIC_FOR = "for";
  Blockly.Msg.BASIC_FROM = "from";
  Blockly.Msg.BASIC_HZ = "Hz";
  Blockly.Msg.BASIC_IF_SWITCH = "If switch ";
  Blockly.Msg.BASIC_IS = " is ";
  Blockly.Msg.BASIC_LIGHT_PIN = "Light Pin#";
  Blockly.Msg.BASIC_LIGHT_WARNING = "Brightness must be in range 0 - 255";
  Blockly.Msg.BASIC_MUTE = "Mute";
  Blockly.Msg.BASIC_NOLED = "Turn off the light on pin# %1";
  Blockly.Msg.BASIC_NOTONE = "Turn off the tone on pin# %1";
  Blockly.Msg.BASIC_NOTONE_TIP = "Turns the tone off on the selected pin";
  Blockly.Msg.BASIC_PIN_NUM = "Pin#";
  Blockly.Msg.BASIC_READBUTTON = "Read the status of button on pin# %1";
  Blockly.Msg.BASIC_READCOUNTER = "Read the value of counter on button %1";
  Blockly.Msg.BASIC_READKNOB = "Read the value of knob on pin# %1";
  Blockly.Msg.BASIC_SET = "Set";
  Blockly.Msg.BASIC_SETANALOGLED = "Set the light on pin# %1 at brightness %2";
  Blockly.Msg.BASIC_SETDIGITALLED = "Turn on the light on pin# %1";
  Blockly.Msg.BASIC_SETTONE = "Set the tone on pin# %1 at frequency %2";
  Blockly.Msg.BASIC_SET_PIN = "Set Pin#";
  Blockly.Msg.BASIC_TO = "to";
  Blockly.Msg.BASIC_TONE_TIP = "Sets tone on pin to specified frequency within range 31 - 65535";
  Blockly.Msg.BASIC_TONE_WARNING = "Frequency must be in range 31 - 65535";
  Blockly.Msg.BLUE = "Blue";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_DATA = "data";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_RECEIVEMSG = "Receive data";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_RECEIVEMSG_ISSUCCESS = "Receive data successfully";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_RECEIVE_GET_LINE2 = "get data at ";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_RECEIVE_GET_LINE2_2 = "";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_RECEIVE_GET_LINE3 = "as Type";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_RECEIVE_GET_LINE4 = "";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_RECEIVE_LINE3 = "with length of ";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_SENDMSG = "Send data ";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_SETUP = "Bluetooth Intercommunication";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_SETUP1 = "Intercommunication";
  Blockly.Msg.BLUETOOTH_INTERCOMMS_SETUP2 = "";
  Blockly.Msg.BLUETOOTH_LIST_RECEIVED = "From";
  Blockly.Msg.BLUETOOTH_LIST_RECEIVED1 = "get value at index";
  Blockly.Msg.BLUETOOTH_LIST_RECEIVED2 = "";
  Blockly.Msg.BLUETOOTH_NUMBER_RECEIVED = "Received number";
  Blockly.Msg.BLUETOOTH_PAIRING_BIND_ADDR = "Bind Slave Device Address:";
  Blockly.Msg.BLUETOOTH_PAIRING_MASTER = "Bluetooth Pairing: Set as Slave Device";
  Blockly.Msg.BLUETOOTH_PAIRING_SETTING_BAUDRATE = "Set Baud Rate:";
  Blockly.Msg.BLUETOOTH_PAIRING_SETTING_TIMEOUT = "Set Timeout:";
  Blockly.Msg.BLUETOOTH_PAIRING_SLAVE = "Bluetooth Pairing: Set as Master Device";
  Blockly.Msg.BLUETOOTH_SETUP = "When Bluetooth received";
  Blockly.Msg.BLUETOOTH_SETUP_DO = "And Do";
  Blockly.Msg.BLUETOOTH_SETUP_LIST_SETTING = "the length is";
  Blockly.Msg.BLUETOOTH_SETUP_OPT1 = "String";
  Blockly.Msg.BLUETOOTH_SETUP_OPT2 = "Number";
  Blockly.Msg.BLUETOOTH_SETUP_OPT3 = "Array";
  Blockly.Msg.BLUETOOTH_SETUP_SET = "Set";
  Blockly.Msg.BLUETOOTH_SETUP_TO = "to received messages";
  Blockly.Msg.BLUETOOTH_TEXT_RECEIVED = "Received Text";
  Blockly.Msg.BLYNK_AUTH = "Auth Key : ";
  Blockly.Msg.BLYNK_CONNECT = "When Blynk is connected";
  Blockly.Msg.BLYNK_CREATE_WITH_CONTAINER_TITLE_ADD = "Data";
  Blockly.Msg.BLYNK_CREATE_WITH_ITEM_TITLE = "item";
  Blockly.Msg.BLYNK_DATA = "data";
  Blockly.Msg.BLYNK_GET_DATANAME = "get data from";
  Blockly.Msg.BLYNK_GET_DATANAME1 = "";
  Blockly.Msg.BLYNK_GET_DATANAME2 = "";
  Blockly.Msg.BLYNK_GET_INDEX = "at index";
  Blockly.Msg.BLYNK_GET_INDEX1 = "";
  Blockly.Msg.BLYNK_GET_OF = "";
  Blockly.Msg.BLYNK_GET_OF1 = "of";
  Blockly.Msg.BLYNK_GET_OF2 = "";
  Blockly.Msg.BLYNK_GPS_ALTITUDE = "Altitude";
  Blockly.Msg.BLYNK_GPS_LATITUDE = "Latitude";
  Blockly.Msg.BLYNK_GPS_LONGITUDE = "Longitude";
  Blockly.Msg.BLYNK_GPS_SPEED = "Speed";
  Blockly.Msg.BLYNK_LOG = "BLYNK_LOG";
  Blockly.Msg.BLYNK_PW = "WiFi PW: ";
  Blockly.Msg.BLYNK_READ = "when Blynk request data via";
  Blockly.Msg.BLYNK_READ1 = "";
  Blockly.Msg.BLYNK_SELECT = "Select";
  Blockly.Msg.BLYNK_SETUP = "BLYNK SETUP";
  Blockly.Msg.BLYNK_SSID = "WiFi SSID: ";
  Blockly.Msg.BLYNK_TIME_DO = "Do";
  Blockly.Msg.BLYNK_TIME_SECOND = "second";
  Blockly.Msg.BLYNK_TIME_SETTING = "Set timer: every ";
  Blockly.Msg.BLYNK_VIRTUALWRITE = "Send data to Blynk via";
  Blockly.Msg.BLYNK_VIRTUALWRITE_DATA = "Data:";
  Blockly.Msg.BLYNK_WIFI = "Connect to Network";
  Blockly.Msg.BLYNK_WRITE = "Get data from";
  Blockly.Msg.BLYNK_WRITE1 = "";
  Blockly.Msg.BLYNK_WRITE_VARIABLE = "Store into";
  Blockly.Msg.BLYNK_WRITE_VARLENGTH = "length";
  Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
  Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
  Blockly.Msg.CLEAN_UP = "Clean up Blocks";
  Blockly.Msg.CLOUDDATA_CREATE_WITH_CONTAINER_TITLE_ADD = "key[]";
  Blockly.Msg.CLOUDDATA_CREATE_WITH_INPUT_WITH = "Add";
  Blockly.Msg.CLOUDDATA_CREATE_WITH_ITEM_TITLE = "value";
  Blockly.Msg.CLOUDDATA_GENERATOR_DATA = "Generate data";
  Blockly.Msg.CLOUDDATA_PARSE_JSON = "from";
  Blockly.Msg.CLOUDDATA_PARSE_KEY = "Parse data of";
  Blockly.Msg.CLOUDDATA_PARSE_PRETTYPRINT_DISPLAY = "Get generated data";
  Blockly.Msg.CLOUDDATA_PARSE_SETUP_INIT = "Initial parser";
  Blockly.Msg.CLOUDDATA_PARSE_SETUP_PAYLOAD = "parse content";
  Blockly.Msg.CLOUDDATA_PARSE_TYPE = "as";
  Blockly.Msg.COCOCLOUD_CREATE_WITH_CONTAINER_TITLE_ADD = "LIST";
  Blockly.Msg.COCOCLOUD_CREATE_WITH_ITEM_TITLE = "Event";
  Blockly.Msg.COCOCLOUD_GET = "Get Data from Event ";
  Blockly.Msg.COCOCLOUD_GET1 = "";
  Blockly.Msg.COCOCLOUD_GETPAYLOAD = "Data got from Event";
  Blockly.Msg.COCOCLOUD_POST = "Send to Event ";
  Blockly.Msg.COCOCLOUD_POST_DATA = "Data";
  Blockly.Msg.COCOCLOUD_TIME_DAY = "Day";
  Blockly.Msg.COCOCLOUD_TIME_GETDATE = "Get";
  Blockly.Msg.COCOCLOUD_TIME_GETTIME = "Get";
  Blockly.Msg.COCOCLOUD_TIME_HOUR = "Hour";
  Blockly.Msg.COCOCLOUD_TIME_MINUTE = "minute";
  Blockly.Msg.COCOCLOUD_TIME_MONTH = "Month";
  Blockly.Msg.COCOCLOUD_TIME_SECOND = "second";
  Blockly.Msg.COCOCLOUD_TIME_SETUP = "The World Time";
  Blockly.Msg.COCOCLOUD_TIME_YEAR = "Year";
  Blockly.Msg.COCOCLOUD_TITLE = "Web Service CocoCloud";
  Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
  Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
  Blockly.Msg.COLOR = "Colour";
  Blockly.Msg.COLORANALYZER_SETUP = "Colour Analyzer Setup";
  Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
  Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
  Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
  Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
  Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
  Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
  Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
  Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
  Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
  Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
  Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
  Blockly.Msg.COLOUR_RGB_BLUE = "blue";
  Blockly.Msg.COLOUR_RGB_GREEN = "green";
  Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
  Blockly.Msg.COLOUR_RGB_RED = "red";
  Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
  Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
  Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
  Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
  Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
  Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
  Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
  Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
  Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
  Blockly.Msg.CONTROLS_FOREACH_TITLE = "for each item %1 in list %2";
  Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
  Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
  Blockly.Msg.CONTROLS_FOR_TITLE = "count with %1 from %2 to %3 by %4";
  Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
  Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
  Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
  Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
  Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
  Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
  Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
  Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
  Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
  Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
  Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
  Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
  Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
  Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
  Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
  Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
  Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
  Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
  Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
  Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
  Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
  Blockly.Msg.DELETE_ALL_BLOCKS = "Delete all %1 blocks?";
  Blockly.Msg.DELETE_BLOCK = "Delete Block";
  Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
  Blockly.Msg.DISABLE_BLOCK = "Disable Block";
  Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
  Blockly.Msg.ENABLE_BLOCK = "Enable Block";
  Blockly.Msg.ENCODER_GETROTATIONSPEED = "Get Rotation Speed";
  Blockly.Msg.ENCODER_SETUP = "Encoder Setup";
  Blockly.Msg.ENCODER_SETUP_1 = "On Breakout Pin";
  Blockly.Msg.ENV_AS = "as";
  Blockly.Msg.ENV_BLUE_PIN = "B from PIN ";
  Blockly.Msg.ENV_BUZZER_ALARM = "Buzzer Alarm";
  Blockly.Msg.ENV_CRITICAL_VAL = "When the critical value of";
  Blockly.Msg.ENV_DO = "Do";
  Blockly.Msg.ENV_GREEN_PIN = "G from PIN ";
  Blockly.Msg.ENV_REACHES = "reaches";
  Blockly.Msg.ENV_RED_PIN = "R from PIN ";
  Blockly.Msg.ENV_SENSOR_HUMID = "Read value of Humidity from ";
  Blockly.Msg.ENV_SENSOR_HUMIDITY = "Humidity";
  Blockly.Msg.ENV_SENSOR_LIGHT = "Read value of Light from ";
  Blockly.Msg.ENV_SENSOR_MIC = "Read value of Sound from ";
  Blockly.Msg.ENV_SENSOR_READ = "Read value of";
  Blockly.Msg.ENV_SENSOR_READTEMP = "Read value of temperature from ";
  Blockly.Msg.ENV_SENSOR_SET_RGB = "Set RGB Light";
  Blockly.Msg.ENV_SENSOR_SOUND = "Sound";
  Blockly.Msg.ENV_SENSOR_TEMPUNIT = "Set unit as";
  Blockly.Msg.ENV_SENSOR_UNITC = "Celsius";
  Blockly.Msg.ENV_SENSOR_UNITF = "Fahrenheit";
  Blockly.Msg.ENV_SET = "Set";
  Blockly.Msg.ENV_SETRGB_B = "B from PIN ";
  Blockly.Msg.ENV_SETRGB_G = "G from PIN ";
  Blockly.Msg.ENV_SETRGB_R = "R from PIN ";
  Blockly.Msg.ENV_SETUP = "Environmental Sensors Setup";
  Blockly.Msg.ENV_SET_TEMP = "Set temperature as ";
  Blockly.Msg.ENV_SET_TEMP_UNIT = "Set unit as ";
  Blockly.Msg.EXPAND_ALL = "Expand Blocks";
  Blockly.Msg.EXPAND_BLOCK = "Expand Block";
  Blockly.Msg.EXPORTPNG = "Export as PNG";
  Blockly.Msg.EXPORTXML = "Export as XML";
  Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
  Blockly.Msg.Friday = "Friday";
  Blockly.Msg.GPS_LATITUDE = "Get Latitude";
  Blockly.Msg.GPS_LONGITUDE = "Get Longitude";
  Blockly.Msg.GPS_SETUP = "GPS Setup";
  Blockly.Msg.GREEN = "Green";
  Blockly.Msg.HELP = "Help";
  Blockly.Msg.HID_KEYBOARD_PRESS = "Set Keyboard: Press";
  Blockly.Msg.HID_KEYBOARD_RELEASE = "Set Keyboard: Release";
  Blockly.Msg.HID_KEYBOARD_RELEASEALL = "Set Keyboard: Release All";
  Blockly.Msg.HID_MOUSE_CLICK = "Set Mouse: Click";
  Blockly.Msg.HID_MOUSE_CLICK_LEFT = "Left";
  Blockly.Msg.HID_MOUSE_CLICK_RIGHT = "Right";
  Blockly.Msg.HID_MOUSE_MOVE = "Set Mouse: Move";
  Blockly.Msg.HID_MOUSE_MOVE_DISTANCE = "px";
  Blockly.Msg.HID_MOUSE_MOVE_FOR = "for";
  Blockly.Msg.HID_MOUSE_PRESS = "Set Mouse: Press";
  Blockly.Msg.HID_MOUSE_RELEASE = "Set Mouse: Release";
  Blockly.Msg.HID_SETUP = "HID Setup";
  Blockly.Msg.INFRAREDRAY_RECVAL = "Signal Received";
  Blockly.Msg.INFRAREDRAY_SETUP = "IR Receiver Setup";
  Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
  Blockly.Msg.ISCOLOR = "Is color";
  Blockly.Msg.JSONOBJECT_CREATE = "JSON Object";
  Blockly.Msg.JSONTOOL_ARRAY_SIZE = "Array size";
  Blockly.Msg.JSONTOOL_GENERATOR = "JSON genrator";
  Blockly.Msg.JSONTOOL_GENERATOR_ARRAY_VALUE = "JSON Array add: value";
  Blockly.Msg.JSONTOOL_GENERATOR_JSONOBJECT = "Object";
  Blockly.Msg.JSONTOOL_GENERATOR_KEY = "JSON Object add: Key ";
  Blockly.Msg.JSONTOOL_GENERATOR_MAIN_JSONNAME = "JSONVar";
  Blockly.Msg.JSONTOOL_GENERATOR_MAIN_TITLE = "Generate a JSON";
  Blockly.Msg.JSONTOOL_GENERATOR_MAIN_TITLE_NAME = "named";
  Blockly.Msg.JSONTOOL_GENERATOR_NESTED_TITLE = "Nested a JSON";
  Blockly.Msg.JSONTOOL_GENERATOR_NESTED_TITLE_NAME = "named";
  Blockly.Msg.JSONTOOL_GENERATOR_SETUP = "JSON genrator Setup";
  Blockly.Msg.JSONTOOL_GENERATOR_VALUE = "value";
  Blockly.Msg.JSONTOOL_OBJECT_SIZE = "Object size";
  Blockly.Msg.JSONTOOL_PARSE_ARRAY = "(JSON Array)";
  Blockly.Msg.JSONTOOL_PARSE_BY = "get item of ";
  Blockly.Msg.JSONTOOL_PARSE_EACH = "From JSON Object ";
  Blockly.Msg.JSONTOOL_PARSE_INDEX = "index of";
  Blockly.Msg.JSONTOOL_PARSE_ISSUCCESS = "parsed Successfully";
  Blockly.Msg.JSONTOOL_PARSE_ISSUCCESS_NAME = "Is JSON Object";
  Blockly.Msg.JSONTOOL_PARSE_JSONOBJECT = "Object";
  Blockly.Msg.JSONTOOL_PARSE_KEY = "(JSON Object) Key";
  Blockly.Msg.JSONTOOL_PARSE_KEYVALUE = "From JSON Object %1 get item of %2";
  Blockly.Msg.JSONTOOL_PARSE_NEST = "nested with";
  Blockly.Msg.JSONTOOL_PARSE_PRETTYPRINT = "Print JSON ";
  Blockly.Msg.JSONTOOL_PARSE_PRETTYPRINT_DISPLAY = "pretty data";
  Blockly.Msg.JSONTOOL_PARSE_PRETTYPRINT_WAY = "in pretty way";
  Blockly.Msg.JSONTOOL_PARSE_RESPONSE = " Data";
  Blockly.Msg.JSONTOOL_PARSE_SETUP = "JSON Parser Setup";
  Blockly.Msg.JSONTOOL_PARSE_TOVAR = "get item to";
  Blockly.Msg.JSONTOOL_PARSE_VARTYPE = "";
  Blockly.Msg.LED_BACKCOLOR = "Background";
  Blockly.Msg.LED_BRIGHTNESS_WARNING = "Brightness must be in range 0 - 255";
  Blockly.Msg.LED_BRTN = "Brightness";
  Blockly.Msg.LED_CLEAR = "Clear Screen";
  Blockly.Msg.LED_COLOR = "Color";
  Blockly.Msg.LED_COORDINATE = "Coordinate";
  Blockly.Msg.LED_DRAW = "Draw ";
  Blockly.Msg.LED_FONT = "Font";
  Blockly.Msg.LED_FULL = "Full";
  Blockly.Msg.LED_HEIGHT = "Height";
  Blockly.Msg.LED_LINE = "Line";
  Blockly.Msg.LED_LINE_END = "To";
  Blockly.Msg.LED_LINE_START = "Start From";
  Blockly.Msg.LED_MULTICOM = "H";
  Blockly.Msg.LED_PANELHEIGHT = "Number of Matrix in Height";
  Blockly.Msg.LED_PANELWIDTH = "Number of Matrix in Width";
  Blockly.Msg.LED_PATTERN = "Pattern";
  Blockly.Msg.LED_PIN = "Pin";
  Blockly.Msg.LED_PIXEL = "Pixel";
  Blockly.Msg.LED_POSITION = "Position";
  Blockly.Msg.LED_RECTANGLE = "Rectangle";
  Blockly.Msg.LED_SCROLL = "Scrolling";
  Blockly.Msg.LED_SCROLL_NO = "No";
  Blockly.Msg.LED_SCROLL_SPEED = "speed";
  Blockly.Msg.LED_SCROLL_YES = "Yes";
  Blockly.Msg.LED_SETUP = "LED Matrix Setup";
  Blockly.Msg.LED_SET_BRIGHTNESS = "Set brightness to";
  Blockly.Msg.LED_SET_ROTATION = "Set rotation to";
  Blockly.Msg.LED_SET_ROTATION_DEGREE = "degree";
  Blockly.Msg.LED_SHOW_ALL = "Show Above";
  Blockly.Msg.LED_SINGLE_SETUP = "Single LED Matrix Setup";
  Blockly.Msg.LED_SIZE = "Size";
  Blockly.Msg.LED_STRIP_LOCATION = "Location";
  Blockly.Msg.LED_STRIP_PIXEL = "Draw Pixel";
  Blockly.Msg.LED_STROKED = "Stroked";
  Blockly.Msg.LED_TEXT = "Text";
  Blockly.Msg.LED_WIDTH = " Width";
  Blockly.Msg.LED_WORD = "Word";
  Blockly.Msg.LIGHT_BRIGHTNESS = "at brightness";
  Blockly.Msg.LIGHT_PIN = "Set light on";
  Blockly.Msg.LIGHT_TURNOFF = "Turn off light on";
  Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
  Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
  Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
  Blockly.Msg.LISTS_CREATE_LIST_WITH = "create list with";
  Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
  Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
  Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
  Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
  Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
  Blockly.Msg.LISTS_GETINDEX = "from %1 get item at %2";
  Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
  Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
  Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
  Blockly.Msg.LISTS_GET_INDEX_GET = "get";
  Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
  Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
  Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
  Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
  Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
  Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
  Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
  Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
  Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
  Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
  Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
  Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
  Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
  Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
  Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
  Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
  Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
  Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
  Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if item is not found.";
  Blockly.Msg.LISTS_INLIST = "in list";
  Blockly.Msg.LISTS_INT_CREATE_WITH_INPUT_WITH = "Create Number List with";
  Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
  Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 is empty";
  Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";
  Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
  Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
  Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
  Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
  Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
  Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
  Blockly.Msg.LISTS_SETINDEX = "Set %1 at index %2 to %3";
  Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
  Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
  Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
  Blockly.Msg.LISTS_SET_INDEX_SET = "set";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
  Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
  Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
  Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";
  Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";
  Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";
  Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";
  Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";
  Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";
  Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";
  Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
  Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
  Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
  Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
  Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
  Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
  Blockly.Msg.LISTS_STRING_CREATE_WITH_INPUT_WITH = "Create String List with";
  Blockly.Msg.LISTS_THE_LENGTH_OF = "the length of %1";
  Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
  Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
  Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
  Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
  Blockly.Msg.LOGIC_CASE = "Case";
  Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
  Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
  Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
  Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
  Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
  Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
  Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
  Blockly.Msg.LOGIC_DEFAULT = "Default";
  Blockly.Msg.LOGIC_DO = "Do";
  Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
  Blockly.Msg.LOGIC_NEGATE_TITLE = "not %1";
  Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
  Blockly.Msg.LOGIC_NULL = "null";
  Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
  Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
  Blockly.Msg.LOGIC_OPERATION_AND = "and";
  Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
  Blockly.Msg.LOGIC_OPERATION_OR = "or";
  Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
  Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
  Blockly.Msg.LOGIC_SWITCH = "Switch";
  Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
  Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
  Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
  Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
  Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
  Blockly.Msg.MAINEASYMODE_TRANSFER_RECEIVE = "Get Data from WiFi Module";
  Blockly.Msg.MAINEASYMODE_TRANSFER_RECEIVE_GET = "From ";
  Blockly.Msg.MAINEASYMODE_TRANSFER_RECEIVE_GET_LINE2 = "get data at ";
  Blockly.Msg.MAINEASYMODE_TRANSFER_RECEIVE_GET_LINE3 = "as Type";
  Blockly.Msg.MAINEASYMODE_TRANSFER_RECEIVE_GET_LINE4 = "";
  Blockly.Msg.MAINEASYMODE_TRANSFER_RECEIVE_LINE2 = "And store it to ";
  Blockly.Msg.MAINEASYMODE_TRANSFER_RECEIVE_LINE3 = "with length of ";
  Blockly.Msg.MAINEASYMODE_TRANSFER_SEND = "Create List";
  Blockly.Msg.MAINEASYMODE_TRANSFER_SEND_LINE2 = "Send data to Wi-Fi Module";
  Blockly.Msg.MAINEASYMODE_TRANSFER_SEND_VALUE = "Data";
  Blockly.Msg.MAINWIFI_RECEIVEMSG = "Receive data to";
  Blockly.Msg.MAINWIFI_RECEIVEMSG_ISSUCCESS = "Receive data successfully";
  Blockly.Msg.MAINWIFI_RECEIVEMSG_LENGTH = ", data length ";
  Blockly.Msg.MAINWIFI_SENDMSG = "Send data ";
  Blockly.Msg.MAINWIFI_SENDMSG_LENGTH = ", data length ";
  Blockly.Msg.MAINWIFI_SETUP = "WiFi Data Transfer Setup";
  Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
  Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
  Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
  Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
  Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
  Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
  Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
  Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
  Blockly.Msg.MATH_CHANGE_TITLE = "change %1 by %2";
  Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
  Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
  Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
  Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
  Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
  Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
  Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
  Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
  Blockly.Msg.MATH_IS_EVEN = "is even";
  Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
  Blockly.Msg.MATH_IS_ODD = "is odd";
  Blockly.Msg.MATH_IS_POSITIVE = "is positive";
  Blockly.Msg.MATH_IS_PRIME = "is prime";
  Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
  Blockly.Msg.MATH_IS_WHOLE = "is whole";
  Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
  Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
  Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
  Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
  Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
  Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
  Blockly.Msg.MATH_ONLIST_HELPURL = "";
  Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
  Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
  Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
  Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
  Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
  Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
  Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
  Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
  Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
  Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
  Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
  Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
  Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
  Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
  Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
  Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
  Blockly.Msg.MATH_POWER_SYMBOL = "^";
  Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
  Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
  Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
  Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
  Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
  Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
  Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
  Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
  Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
  Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
  Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
  Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
  Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
  Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
  Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
  Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
  Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
  Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
  Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
  Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
  Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
  Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
  Blockly.Msg.MATH_TRIG_ACOS = "acos";
  Blockly.Msg.MATH_TRIG_ASIN = "asin";
  Blockly.Msg.MATH_TRIG_ATAN = "atan";
  Blockly.Msg.MATH_TRIG_COS = "cos";
  Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
  Blockly.Msg.MATH_TRIG_SIN = "sin";
  Blockly.Msg.MATH_TRIG_TAN = "tan";
  Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
  Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
  Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
  Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
  Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
  Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
  Blockly.Msg.MATH_MAX_MIN_OPERATOR_MAX = "max";
  Blockly.Msg.MATH_MAX_MIN_OPERATOR_MIN = "min";
  Blockly.Msg.MATH_MAX_MIN_TOOLTIP = "Return the max / min of two numbers.";
  Blockly.Msg.MATH_MAX_MIN_HELPURL = "https://www.arduino.cc/reference/en/language/functions/math/max/";
  Blockly.Msg.ME = "Me";
  Blockly.Msg.MOTION_GETACC = "Get Acceleration of";
  Blockly.Msg.MOTION_GETACC1 = "";
  Blockly.Msg.MOTION_GETRAWDATA = "get rawdata";
  Blockly.Msg.MOTION_GETYPR = "Get Rotation of";
  Blockly.Msg.MOTION_GETYPR1 = "";
  Blockly.Msg.MOTION_ONDIRECTION = "On Tilt Direction";
  Blockly.Msg.MOTION_ONDIRECTION1 = "";
  Blockly.Msg.MOTION_ONDIRECTION_BACK = "back";
  Blockly.Msg.MOTION_ONDIRECTION_CLOCKWISE = "clockwise";
  Blockly.Msg.MOTION_ONDIRECTION_COUNTERCLOCKWISE = "counterclockwise";
  Blockly.Msg.MOTION_ONDIRECTION_FRONT = "front";
  Blockly.Msg.MOTION_ONDIRECTION_LEFT = "Left";
  Blockly.Msg.MOTION_ONDIRECTION_RIGHT = "right";
  Blockly.Msg.MOTION_ONSHAKE = "On Shake";
  Blockly.Msg.MOTION_SETUP = "Motion Setup";
  Blockly.Msg.MOTION_TRENDENCY = "get motion trendency";
  Blockly.Msg.MOTOR_MOVE_DIRECTION1 = "clockwise";
  Blockly.Msg.MOTOR_MOVE_DIRECTION2 = "counter-clockwise";
  Blockly.Msg.MOTOR_MOVE_MOTOR = "Set motor";
  Blockly.Msg.MOTOR_MOVE_MSG = "and";
  Blockly.Msg.MOTOR_SETUP = "Motor Driver Setup";
  Blockly.Msg.MOTOR_SPEED = "speed";
  Blockly.Msg.MOTOR_STOP = "Set Motors Stop";
  Blockly.Msg.MUSIC_BEAT = "beat";
  Blockly.Msg.MUSIC_DURATION = "for";
  Blockly.Msg.MUSIC_INSTRUMENT = "Set instrument as";
  Blockly.Msg.MUSIC_INSTRUMENT_ACCORION = "Accordion";
  Blockly.Msg.MUSIC_INSTRUMENT_BASS = "Bass";
  Blockly.Msg.MUSIC_INSTRUMENT_CELLO = "Cello";
  Blockly.Msg.MUSIC_INSTRUMENT_DRAWBARORGAN = "Drawbar Organ";
  Blockly.Msg.MUSIC_INSTRUMENT_DRUM = "Drum";
  Blockly.Msg.MUSIC_INSTRUMENT_EGUITAR = "Electric Guitar";
  Blockly.Msg.MUSIC_INSTRUMENT_EPIANO = "Electric Piano";
  Blockly.Msg.MUSIC_INSTRUMENT_FLUTE = "Flute";
  Blockly.Msg.MUSIC_INSTRUMENT_GPIANO = "Grand Piano";
  Blockly.Msg.MUSIC_INSTRUMENT_GUITAR = "Guitar";
  Blockly.Msg.MUSIC_INSTRUMENT_MUSICBOX = "Music Box";
  Blockly.Msg.MUSIC_INSTRUMENT_PICCOLO = "Piccolo";
  Blockly.Msg.MUSIC_INSTRUMENT_SAX = "Sax";
  Blockly.Msg.MUSIC_INSTRUMENT_SITAR = "Sitar";
  Blockly.Msg.MUSIC_INSTRUMENT_TRUMPET = "Trumpet";
  Blockly.Msg.MUSIC_INSTRUMENT_VIOLA = "Viola";
  Blockly.Msg.MUSIC_INSTRUMENT_VIOLIN = "Violin";
  Blockly.Msg.MUSIC_INSTRUMENT_WHISTLE = "Whistle";
  Blockly.Msg.MUSIC_INSTRUMENT_WOODBLOCK = "Woodblock";
  Blockly.Msg.MUSIC_INSTRUMENT_XYLOPHONE = "Xylophone";
  Blockly.Msg.MUSIC_MP3_CURRENTVOLUME = "Get current volume";
  Blockly.Msg.MUSIC_MP3_PLAYALL = "List Play";
  Blockly.Msg.MUSIC_MP3_PLAYALL_NAME = "Play Mode";
  Blockly.Msg.MUSIC_MP3_PLAYMODE_LISTREPEAT = "List Repeat";
  Blockly.Msg.MUSIC_MP3_PLAYMODE_NORMAL = "Normal";
  Blockly.Msg.MUSIC_MP3_PLAYMODE_REPEAT = "Repeat";
  Blockly.Msg.MUSIC_MP3_PLAYONE = "Play music ";
  Blockly.Msg.MUSIC_MP3_PLAYONE_NAME = "Music:";
  Blockly.Msg.MUSIC_MP3_PLAYONE_NORMAL = "once";
  Blockly.Msg.MUSIC_MP3_PLAYONE_REPEAT = "repeatedly";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING = "MP3 Music Operation:";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING_NEXTSONG = "Next song";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING_PAUSE = "Pause";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING_PLAYALL = "Play all Song";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING_PRESONG = "Previous song";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING_RESUME = "Resume";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING_STOP = "Stop";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING_VOLDOWN = "Volume down";
  Blockly.Msg.MUSIC_MP3_PLAYSETTING_VOLUP = "Volume up";
  Blockly.Msg.MUSIC_MP3_PLAY_NORMAL = "Normal";
  Blockly.Msg.MUSIC_MP3_PLAY_REPEAT = "List Repeat";
  Blockly.Msg.MUSIC_MP3_SETUP = "MP3 Player Setup";
  Blockly.Msg.MUSIC_MP3_SETUP_SETVOLUME = "Set volume";
  Blockly.Msg.MUSIC_MP3_SETUP_SETVOLUME_HIGH = "High";
  Blockly.Msg.MUSIC_MP3_SETUP_SETVOLUME_LOW = "Low";
  Blockly.Msg.MUSIC_MP3_SETUP_SETVOLUME_MID = "Mid";
  Blockly.Msg.MUSIC_MP3_SETVOLUME = "Set volume to";
  Blockly.Msg.MUSIC_NOTE = "Note";
  Blockly.Msg.MUSIC_PLAY_NOTE = "Play";
  Blockly.Msg.MUSIC_PLAY_NOTE_TOOLTIP = "right click this block and check the help page to see the corresponding music note.";
  Blockly.Msg.MUSIC_REST = "Rest for";
  Blockly.Msg.MUSIC_VOLUME = "Set volume as";
  Blockly.Msg.MUSIC_VOL_MAX = "Max";
  Blockly.Msg.MUSIC_VOL_MIN = "Min";
  Blockly.Msg.Monday = "Monday";
  Blockly.Msg.Motion_Accelerate = "Accelerate";
  Blockly.Msg.Motion_Gyroscope = "Gyroscope";
  Blockly.Msg.NBIOT_ENABLE = "Enable NB-IoT Interactive Serial";
  Blockly.Msg.NBIOT_HTTP_APIKEY = "Cloud Event API Key";
  Blockly.Msg.NBIOT_HTTP_CLOUD_GET = "NB-IoT CocoCloud: Receive Data";
  Blockly.Msg.NBIOT_HTTP_CONTENTTYPE = "Content Type";
  Blockly.Msg.NBIOT_HTTP_DATA = "Data:";
  Blockly.Msg.NBIOT_HTTP_IFTTT_APIKEY = "IFTTT API Key";
  Blockly.Msg.NBIOT_HTTP_IFTTT_EVENT = "IFTTT Event Name";
  Blockly.Msg.NBIOT_HTTP_IFTTT_TITLE = "NB-IoT IFTTT: Send Data";
  Blockly.Msg.NBIOT_HTTP_THINGSPEAK_APIKEY = "Event API Key";
  Blockly.Msg.NBIOT_HTTP_THINGSPEAK_TITLE = "NB-IoT Thingspeak: Send Data";
  Blockly.Msg.NBIOT_HTTP_TITLE = "NB-IoT CocoCloud: Send Data";
  Blockly.Msg.NBIOT_IS_POWERON = "NB-IoT Module is Powered On";
  Blockly.Msg.NBIOT_NETWORK_CONNECTED = "Network Connected";
  Blockly.Msg.NBIOT_NETWORK_IP = "Get NB-IoT Module IP";
  Blockly.Msg.NBIOT_SETUP = "NB-IoT Comm.Setup";
  Blockly.Msg.NEW_INSTANCE = "New instance...";
  Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";
  Blockly.Msg.NEW_VARIABLE = "New variable...";
  Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
  Blockly.Msg.OLED_CENTER_POS = "Center Position";
  Blockly.Msg.OLED_CIRCLE = "Circle";
  Blockly.Msg.OLED_CLEAR = "Clear";
  Blockly.Msg.OLED_COLOR = "Color";
  Blockly.Msg.OLED_COORDINATE = "Starting Coordinate";
  Blockly.Msg.OLED_DRAW = "Draw ";
  Blockly.Msg.OLED_FALSE = "False";
  Blockly.Msg.OLED_FULL = "Full";
  Blockly.Msg.OLED_HEIGHT = "Height";
  Blockly.Msg.OLED_LINE = "Line";
  Blockly.Msg.OLED_LINE_END = "To";
  Blockly.Msg.OLED_LINE_START = "Start From";
  Blockly.Msg.OLED_POINT = "Point";
  Blockly.Msg.OLED_POSITION = "Position";
  Blockly.Msg.OLED_RADIUS = "Set Radius as";
  Blockly.Msg.OLED_RECTANGLE = "Rectangle";
  Blockly.Msg.OLED_SETROTATION = "Set screen rotation to";
  Blockly.Msg.OLED_SETROTATION_DEGREE = "degree";
  Blockly.Msg.OLED_SETUP = "OLED Screen Setup";
  Blockly.Msg.OLED_SIZE = "Size";
  Blockly.Msg.OLED_STROKED = "Stroked";
  Blockly.Msg.OLED_TEXT = "Text";
  Blockly.Msg.OLED_TEXTNEWLINE = "New Line";
  Blockly.Msg.OLED_TRIANGLE = "Triangle";
  Blockly.Msg.OLED_TRUE = "True";
  Blockly.Msg.OLED_WIDTH = "Width";
  Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
  Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
  Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
  Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
  Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
  Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
  Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
  Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
  Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
  Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe this function...";
  Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
  Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
  Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "func1";
  Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "to";
  Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
  Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
  Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
  Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
  Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
  Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
  Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
  Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
  Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
  Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
  Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
  Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
  Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
  Blockly.Msg.PULSESENSOR_GETBPM = "Get BPM";
  Blockly.Msg.PULSESENSOR_HEARTBEAT_PRINT = "Serial Print Pulse Raw Data";
  Blockly.Msg.PULSESENSOR_HEARTBEAT_WHEN = "When Your Heart Beats";
  Blockly.Msg.PULSESENSOR_HEARTBEAT_WHENNO = "When Your Heart Doesn't Beats";
  Blockly.Msg.PULSESENSOR_SETUP = "Pulse Sensor Setup";
  Blockly.Msg.PULSESENSOR_SETUP_1 = "Set Pin on";
  Blockly.Msg.READ_B = "Read Blue";
  Blockly.Msg.READ_G = "Read Green";
  Blockly.Msg.READ_R = "Read Red";
  Blockly.Msg.RED = "Red";
  Blockly.Msg.REDO = "Redo";
  Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
  Blockly.Msg.RENAME_INSTANCE = "Rename instance...";
  Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";
  Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
  Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
  Blockly.Msg.REQUEST_DATA_CLOUD = "Cloud Data";
  Blockly.Msg.REQUEST_DATA_STRING = "String";
  Blockly.Msg.RFID_READID = "Read Card ID";
  Blockly.Msg.RFID_SETUP = "RFID Setup";
  Blockly.Msg.ROBOT_SETMOVE_MOVEMENT = "Set biped";
  Blockly.Msg.ROBOT_SETMOVE_TEMPO = "with tempo in";
  Blockly.Msg.ROBOT_SETUP = "Bipedal Walking Robot Setup";
  Blockly.Msg.ROBOT_SETUP_SETRLPIN = "and Left Foot pin#";
  Blockly.Msg.ROBOT_SETUP_SETRRPIN = "Set Right Foot pin#";
  Blockly.Msg.ROBOT_SETUP_SETYLPIN = "and Left Hip pin#";
  Blockly.Msg.ROBOT_SETUP_SETYRPIN = "Set Right Hip pin#";
  Blockly.Msg.RTC_DAY = "Day";
  Blockly.Msg.RTC_GETDATE = "Get Current Date";
  Blockly.Msg.RTC_GETTIME = "Get Current Time";
  Blockly.Msg.RTC_GETWEEK = "Get Current Week";
  Blockly.Msg.RTC_HOUR = "Hour";
  Blockly.Msg.RTC_MINUTE = "Minute";
  Blockly.Msg.RTC_MONTH = "Month";
  Blockly.Msg.RTC_SECOND = "Second";
  Blockly.Msg.RTC_SETDATE = "Date";
  Blockly.Msg.RTC_SETDATETIME = "set Date and Time";
  Blockly.Msg.RTC_SETTIME = "Time";
  Blockly.Msg.RTC_SETUP = "RTC Setup";
  Blockly.Msg.RTC_SETWEEK = "Week";
  Blockly.Msg.RTC_WEEK = "Week";
  Blockly.Msg.RTC_YEAR = "Year";
  Blockly.Msg.SONAR = "Sonar";
  Blockly.Msg.SONAR_READ_DIST = "Read distance (cm) from";
  Blockly.Msg.SONAR_SETUP = "Setup";
  Blockly.Msg.SONAR_SETUP_ECHOPIN = "and Echo at pin#";
  Blockly.Msg.SONAR_SETUP_MAXDIST = "Set max distance";
  Blockly.Msg.SONAR_SETUP_TRIGPIN = "Set Trig at pin#";
  Blockly.Msg.Saturday = "Saturday";
  Blockly.Msg.Sunday = "Sunday";
  Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
  Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
  Blockly.Msg.TEXT_APPEND_TO = "to";
  Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
  Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
  Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
  Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
  Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
  Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
  Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
  Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
  Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
  Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
  Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
  Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
  Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
  Blockly.Msg.TEXT_CHARAT_TAIL = "";
  Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
  Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
  Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
  Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
  Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
  Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
  Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
  Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
  Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
  Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
  Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
  Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
  Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
  Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
  Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
  Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
  Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
  Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
  Blockly.Msg.TEXT_INDEXOF_TAIL = "";
  Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns 0 if text is not found.";
  Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
  Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
  Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
  Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
  Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
  Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
  Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
  Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
  Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
  Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
  Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
  Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
  Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
  Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
  Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
  Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
  Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
  Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
  Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
  Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
  Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
  Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
  Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
  Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
  Blockly.Msg.THINGSPEAK_CREATE_WITH_CONTAINER_TITLE_ADD = "Field";
  Blockly.Msg.THINGSPEAK_CREATE_WITH_INPUT_WITH = "FIELD";
  Blockly.Msg.THINGSPEAK_CREATE_WITH_ITEM_TITLE = "value";
  Blockly.Msg.TODAY = "Today";
  Blockly.Msg.TOUCH_AT = "When Touch Pin ";
  Blockly.Msg.TOUCH_CASE = "Key No.";
  Blockly.Msg.TOUCH_DEFAULT = "Default";
  Blockly.Msg.TOUCH_DO = "Do";
  Blockly.Msg.TOUCH_LOOSE = "When loose it";
  Blockly.Msg.TOUCH_SETUP = "Touch Sensor Setup";
  Blockly.Msg.TOUCH_SWITCH = "⌘ When Touch Pins";
  Blockly.Msg.TOUCH_THEN_LOOSE_SWITCH = "⌘ Loose touched Pins";
  Blockly.Msg.Thursday = "Thursday";
  Blockly.Msg.Tuesday = "Tuesday";
  Blockly.Msg.UNDO = "Undo";
  Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
  Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
  Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
  Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
  Blockly.Msg.VARIABLES_SET = "set %1 to %2";
  Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
  Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
  Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
  Blockly.Msg.WATERTEMP_GET_TEMP = "Get Water Temperature (ºC)";
  Blockly.Msg.WATERTEMP_SETUP_ATTACHED_PIN = "Digital Pin Attached:";
  Blockly.Msg.WATERTEMP_SETUP_BLOCKNAME = "Water Temperature Sensor";
  Blockly.Msg.WATERTEMP_SETUP_SENSORTYPE = "Sensor type:";
  Blockly.Msg.WATERTEMP_SETUP_SETUP = "Setup";
  Blockly.Msg.WEBPAGE_BUTTONCTRL_SETPATH = " set path to:";
  Blockly.Msg.WEBPAGE_BUTTONCTRL_TEXT_BOTTOM = "Button Bottom:";
  Blockly.Msg.WEBPAGE_BUTTONCTRL_TEXT_CENTER = "Button Center:";
  Blockly.Msg.WEBPAGE_BUTTONCTRL_TEXT_LEFT = "Button Left:";
  Blockly.Msg.WEBPAGE_BUTTONCTRL_TEXT_RIGHT = "Button Right:";
  Blockly.Msg.WEBPAGE_BUTTONCTRL_TEXT_TOP = "Button Top:";
  Blockly.Msg.WEBPAGE_BUTTONCTRL_TITLE = "Web Dashboard: Button Controller";
  Blockly.Msg.WEBPAGE_BUTTON_NAME = "Button Name";
  Blockly.Msg.WEBPAGE_BUTTON_ROUTER = "Set request path to:";
  Blockly.Msg.WEBPAGE_BUTTON_TITLE = "Web Dashboard: Button";
  Blockly.Msg.WEBPAGE_COLORPICKER_PATH = "Set request path to:";
  Blockly.Msg.WEBPAGE_COLORPICKER_SUBTITLE = "(Note: Data format in RGB)";
  Blockly.Msg.WEBPAGE_COLORPICKER_TITLE = "Web Dashboard: Color Picker Widget";
  Blockly.Msg.WEBPAGE_LABLE = "Label Name";
  Blockly.Msg.WEBPAGE_LABLE_TITLE = "Web Dashboard: Label";
  Blockly.Msg.WIFICLIENT_HTTP_GET_DATA = "Get data stored into";
  Blockly.Msg.WIFICLIENT_HTTP_GET_URL = "Send GET Request to";
  Blockly.Msg.WIFICLIENT_HTTP_POST_DATA = "Data";
  Blockly.Msg.WIFICLIENT_HTTP_POST_TYPE = "as";
  Blockly.Msg.WIFICLIENT_HTTP_POST_URL = "Send POST Request to";
  Blockly.Msg.WIFICLIENT_HTTP_POST_VAR = "Create list";
  Blockly.Msg.WIFICLIENT_HTTP_PUT_DATA = "From content";
  Blockly.Msg.WIFICLIENT_HTTP_PUT_TYPE = "as";
  Blockly.Msg.WIFICLIENT_HTTP_PUT_URL = "Send PUT Request to";
  Blockly.Msg.WIFICLIENT_HTTP_RESPONSE = "Get HTTP Response";
  Blockly.Msg.WIFICLIENT_HTTP_SETUP = "Client Setup";
  Blockly.Msg.WIFICLIENT_RECEIVE_GET = "From";
  Blockly.Msg.WIFICLIENT_RECEIVE_GET_LINE2 = "Get data of index";
  Blockly.Msg.WIFICLIENT_RECEIVE_GET_LINE3 = "as type";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_END = "";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_GETDATA = "Get Data and Store it to ";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_KEY = "From";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_KEY1 = "get the value with property";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_KEY2 = "named ";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_SENDDATA = "Send Data ";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_SETVAR = "item";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_SETVAR_FROM = "";
  Blockly.Msg.WIFIEASYMODE_COCOCLOUD_TYPE = "as type";
  Blockly.Msg.WIFIEASYMODE_COCOClOUD_DATA_NAME = "Name:";
  Blockly.Msg.WIFIEASYMODE_COCOClOUD_EVENT = "Cloud Event API Key:";
  Blockly.Msg.WIFIEASYMODE_IFTTT_EVENT = "IFTTT Event Name:";
  Blockly.Msg.WIFIEASYMODE_IFTTT_FETCH = "Fecth data";
  Blockly.Msg.WIFIEASYMODE_IFTTT_KEY = "IFTTT Key:";
  Blockly.Msg.WIFIEASYMODE_IFTTT_POST = "Post data";
  Blockly.Msg.WIFIEASYMODE_IFTTT_SENDDATA = "Send Data";
  Blockly.Msg.WIFIEASYMODE_IFTTT_TYPE = "Webhook Type:";
  Blockly.Msg.WIFIEASYMODE_NETWORK_PW = "WiFi Password";
  Blockly.Msg.WIFIEASYMODE_NETWORK_SSID = "WiFi Name";
  Blockly.Msg.WIFIEASYMODE_NETWORK_TITLE = "Connect to WiFi:";
  Blockly.Msg.WIFIEASYMODE_THINGSPEAK_APIKEY = "Channel API Key:";
  Blockly.Msg.WIFIEASYMODE_THINGSPEAK_SENDDATA = "Send data:";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_RECEIVE = "Get Data from Main Controller";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_RECEIVE_GET = "From ";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_RECEIVE_GET_LINE2 = "get data at ";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_RECEIVE_GET_LINE3 = "as Type";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_RECEIVE_GET_LINE4 = "";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_RECEIVE_LINE2 = "And store it to ";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_RECEIVE_LINE3 = "with length of ";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_SEND = "Create List";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_SEND_LINE2 = "Send data to Main Controller";
  Blockly.Msg.WIFIEASYMODE_TRANSFER_SEND_VALUE = "Data";
  Blockly.Msg.WIFINETWORK_AP_PW = "set PASSWORD ";
  Blockly.Msg.WIFINETWORK_AP_SETUP = "WiFi Access Point Setup";
  Blockly.Msg.WIFINETWORK_AP_SSID = "set SSID ";
  Blockly.Msg.WIFINETWORK_CONNECT = "WiFi Connect Setup";
  Blockly.Msg.WIFINETWORK_CONNECT_PW = "set PASSWORD ";
  Blockly.Msg.WIFINETWORK_CONNECT_SSID = "set SSID ";
  Blockly.Msg.WIFINETWORK_GETGATEWAYIP = "Get gateway IP";
  Blockly.Msg.WIFINETWORK_GETLOCALIP = "Get local IP";
  Blockly.Msg.WIFINETWORK_GETMACADDR = "Get MAC address";
  Blockly.Msg.WIFINETWORK_GETSTATIONNUM = "get client number";
  Blockly.Msg.WIFINETWORK_ISCONNECTED = "isConnected";
  Blockly.Msg.WIFINETWORK_PW_WARN = "PASSWORD should be set as more than eight digits";
  Blockly.Msg.WIFISERVER_HANDLECLIENT = "handleclient";
  Blockly.Msg.WIFISERVER_LIST = "Create List";
  Blockly.Msg.WIFISERVER_RECEIVE = "Server receive data";
  Blockly.Msg.WIFISERVER_RECEIVE_GET = "From";
  Blockly.Msg.WIFISERVER_RECEIVE_GET_INT = "Number";
  Blockly.Msg.WIFISERVER_RECEIVE_GET_LINE2 = "get data at ";
  Blockly.Msg.WIFISERVER_RECEIVE_GET_LINE3 = " as type ";
  Blockly.Msg.WIFISERVER_RECEIVE_GET_STRING = "Text";
  Blockly.Msg.WIFISERVER_RECEIVE_LENGTH = "with length of ";
  Blockly.Msg.WIFISERVER_RECEIVE_TO = "And store it to";
  Blockly.Msg.WIFISERVER_SEND = "Server send data";
  Blockly.Msg.WIFISERVER_SERVERSEND = "Server send ";
  Blockly.Msg.WIFISERVER_SERVERSEND_CODE = "HTTP code";
  Blockly.Msg.WIFISERVER_SERVERSEND_CONTENT = "content";
  Blockly.Msg.WIFISERVER_SERVERSEND_TYPE = "type";
  Blockly.Msg.WIFISERVER_SETROOTPAGE = "Set homepage";
  Blockly.Msg.WIFISERVER_SETROUTER = "Server Router";
  Blockly.Msg.WIFISERVER_SETROUTER_ONNOTFOUND = "Set Router when URL no found, do with";
  Blockly.Msg.WIFISERVER_SETROUTER_SET = "Set path on";
  Blockly.Msg.WIFISERVER_SETROUTER_WITH = "do";
  Blockly.Msg.WIFISERVER_SETUP = "Server Setup";
  Blockly.Msg.WIFISERVER_WAIT_CONNECTION = "wait connection";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT = "Web Service IFTTT";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT_SET_EVENT = "Event ";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT_SET_KEY = "Key ";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT_SET_KEY1 = "Key1";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT_SET_KEY2 = "Key2";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT_SET_KEY3 = "Key3";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT_SET_VALUE1 = "Value1";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT_SET_VALUE2 = "Value2";
  Blockly.Msg.WIFIWEBSERVICES_IFTTT_SET_VALUE3 = "Value3";
  Blockly.Msg.WIFIWEBSERVICES_THINKSPEAK = "Web Service Thinkspeak";
  Blockly.Msg.WIFIWEBSERVICES_THINKSPEAK_SET_FIELD1 = "Field";
  Blockly.Msg.WIFIWEBSERVICES_THINKSPEAK_SET_KEY = "Api-key";
  Blockly.Msg.WIFIWEBSERVICES_THINKSPEAK_SET_VALUE = "Value";
  Blockly.Msg.WIFI_RECEIVEMSG = "Receive data to";
  Blockly.Msg.WIFI_RECEIVEMSG_ISSUCCESS = "Receive data successfully";
  Blockly.Msg.WIFI_RECEIVEMSG_LENGTH = ", data length ";
  Blockly.Msg.WIFI_SENDMSG = "Send data ";
  Blockly.Msg.WIFI_SENDMSG_LENGTH = ", data length ";
  Blockly.Msg.WIFI_SETUP = "Data Transfer Setup";
  Blockly.Msg.Wednesday = "Wednesday";
  Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
  Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
  Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
  Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
  Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
  Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
  Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
  Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
  Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
  Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
  Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
  Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
  Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
  Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
  Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
  Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
  Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
  Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
  Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
  Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

  Blockly.Msg.MATH_RANDOM_SEED = "random seed %1";

  Blockly.Msg.MICSHOW_RGB = "R %1 G %2 B %3";
}

export default LoadArduinoMsgEn;
